// Code generated by MockGen. DO NOT EDIT.
// Source: lexer/lexer.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	token "github.com/qiuhoude/go-interpreter/token"
)

// MockILexer is a mock of ILexer interface.
type MockILexer struct {
	ctrl     *gomock.Controller
	recorder *MockILexerMockRecorder
}

// MockILexerMockRecorder is the mock recorder for MockILexer.
type MockILexerMockRecorder struct {
	mock *MockILexer
}

// NewMockILexer creates a new mock instance.
func NewMockILexer(ctrl *gomock.Controller) *MockILexer {
	mock := &MockILexer{ctrl: ctrl}
	mock.recorder = &MockILexerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockILexer) EXPECT() *MockILexerMockRecorder {
	return m.recorder
}

// NextToken mocks base method.
func (m *MockILexer) NextToken() token.Token {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NextToken")
	ret0, _ := ret[0].(token.Token)
	return ret0
}

// NextToken indicates an expected call of NextToken.
func (mr *MockILexerMockRecorder) NextToken() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NextToken", reflect.TypeOf((*MockILexer)(nil).NextToken))
}
